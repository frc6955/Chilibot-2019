plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
    id "cpp"
    id "idea"
}

def ROBOT_MAIN_CLASS = "cl.loschilis.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            team = frc.getTeamNumber()
            // failOnMissing = false
        }
        target('rPiVision') {
            directory = '/home/pi'
            failOnMissing = false
            locations {
                ssh {
                    address = 'chilivision1.local'
                    user = 'pi'
                    password = 'raspberry'
                }
            }
        }
        target('WebUI') {
            directory = '/home/pi'
            failOnMissing = false
            locations {
                ssh {
                    address = 'chilivision.local'
                    user = 'pi'
                    password = 'raspberry'
                }
                ssh {
                    address = '10.69.55.20'
                    user = 'pi'
                    password = 'raspberry'
                }
            }
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
        // Artifact to deploy vision files to rPi
        fileCollectionArtifact('rPiCodeDeploy') {
            files = fileTree(dir: 'vision')
            targets << "rPiVision"
            directory = '/home/pi'
            predeploy << {
                execute('sudo mount -o remount,rw /')
            }
            postdeploy << {
                execute('sudo mount -o remount,ro /')
            }
        }

        // Artifact to deploy WebUI files to rPi
        fileTreeArtifact('WebUICodeDeploy') {
            files = fileTree(dir: 'web')
            targets << 'WebUI'
            directory = '/home/pi/webui'

            predeploy << {
                execute('sudo mount -o remount,rw /')
                execute('sudo systemctl stop chiliwebui') 
            }

            postdeploy << {
                execute('sudo cp $(pwd)/webui/resources/chiliwebui.service /etc/systemd/system/chiliwebui.service')
                execute('sudo systemctl daemon-reload; sudo service chiliwebui restart; sudo service chiliwebui status')
                execute('sudo systemctl enable chiliwebui')
                execute('sudo mount -o remount,ro /')
            }
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    // https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.0'
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    // Necessary to allow use of MQTT library
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
